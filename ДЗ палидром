cpp
üü• include <iostream>
üü• include <string>
üü• include <algorithm>

bool isPalindrome(const std::string& str) {
    std::string cleanedStr;
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    for (char ch : str) {
        if (isalnum(ch)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –±—É–∫–≤–æ–π –∏–ª–∏ —Ü–∏—Ñ—Ä–æ–π
            cleanedStr += tolower(ch);
        }
    }
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –µ—ë –æ–±—Ä–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
    std::string reversedStr = cleanedStr;
    std::reverse(reversedStr.begin(), reversedStr.end());
    
    return cleanedStr == reversedStr;
}

int main() {
    std::string userInput;
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    std::cout << "–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ";
    std::getline(std::cin, userInput);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (isPalindrome(userInput)) {
        std::cout << "–ü–ê–õ–ò–ù–î–†–û–ú" << std::endl;
    } else {
        std::cout << "–ù–ï –ü–ê–õ–ò–ù–î–†–û–ú" << std::endl;
    }
    
    return 0;
}
